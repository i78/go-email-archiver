// Code generated by MockGen. DO NOT EDIT.
// Source: Packager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	archive "email-archiver-cli/proto/emailarchver/archive"
	email "email-archiver-cli/proto/emailarchver/email"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackager is a mock of Packager interface.
type MockPackager struct {
	ctrl     *gomock.Controller
	recorder *MockPackagerMockRecorder
}

// MockPackagerMockRecorder is the mock recorder for MockPackager.
type MockPackagerMockRecorder struct {
	mock *MockPackager
}

// NewMockPackager creates a new mock instance.
func NewMockPackager(ctrl *gomock.Controller) *MockPackager {
	mock := &MockPackager{ctrl: ctrl}
	mock.recorder = &MockPackagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackager) EXPECT() *MockPackagerMockRecorder {
	return m.recorder
}

// Package mocks base method.
func (m *MockPackager) Package(mail email.EMail) (archive.ArchiveEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Package", mail)
	ret0, _ := ret[0].(archive.ArchiveEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Package indicates an expected call of Package.
func (mr *MockPackagerMockRecorder) Package(mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Package", reflect.TypeOf((*MockPackager)(nil).Package), mail)
}
