// Code generated by MockGen. DO NOT EDIT.
// Source: KeyRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "email-archiver-cli/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyRepository is a mock of KeyRepository interface.
type MockKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKeyRepositoryMockRecorder
}

// MockKeyRepositoryMockRecorder is the mock recorder for MockKeyRepository.
type MockKeyRepositoryMockRecorder struct {
	mock *MockKeyRepository
}

// NewMockKeyRepository creates a new mock instance.
func NewMockKeyRepository(ctrl *gomock.Controller) *MockKeyRepository {
	mock := &MockKeyRepository{ctrl: ctrl}
	mock.recorder = &MockKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyRepository) EXPECT() *MockKeyRepositoryMockRecorder {
	return m.recorder
}

// Contains mocks base method.
func (m *MockKeyRepository) Contains(keyName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", keyName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockKeyRepositoryMockRecorder) Contains(keyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockKeyRepository)(nil).Contains), keyName)
}

// Persist mocks base method.
func (m *MockKeyRepository) Persist(keyName string, key *models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", keyName, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockKeyRepositoryMockRecorder) Persist(keyName, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockKeyRepository)(nil).Persist), keyName, key)
}
